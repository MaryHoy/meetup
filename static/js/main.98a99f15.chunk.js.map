{"version":3,"sources":["Event.js","EventList.js","mock-events.js","api.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","show","showDetails","setState","prevState","event","this","props","className","name","local_time","local_date","yes_rsvp_count","group","venue","address_1","dangerouslySetInnerHTML","__html","description","href","link","onClick","Component","EventList","events","map","key","id","mockEvents","created","duration","rsvp_limit","date_in_series_pattern","status","time","updated","utc_offset","waitlist_count","lat","lon","repinned","city","country","localized_country_name","join_mode","urlname","who","localized_location","region","timezone","visibility","member_pay_fee","getSuggestions","query","a","window","location","startsWith","name_string","zip","getAccessToken","token","url","axios","get","result","data","getEvents","page","accessToken","localStorage","getItem","code","URLSearchParams","search","getOrRenewAccessToken","lastSavedTime","Date","now","type","tokenInfo","setItem","access_token","refresh_token","CitySearch","suggestions","handleInputChanged","value","target","then","handleItemClicked","updateEvents","onChange","placeholder","item","NumberOfEvents","numberOfEvents","App","defaultCity","response","length","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98a99f15.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n\n  state = {\n    show: false\n  };\n\n  showDetails = () => {\n    this.setState(prevState => ({\n      show: !prevState.show\n    }))\n  }\n\n\n  render() {\n\n    const {event} = this.props;\n\n    return (\n      <div className=\"Event\">\n        <div className=\"eventName\">{event.name}</div>\n          <p className=\"time\">{event.local_time} on {event.local_date}</p>\n          <p className=\"rsvp\">{event.yes_rsvp_count} people are going</p>\n        {this.state.show && (\n          <div className=\"details\">\n            <div className=\"eventGroup\">{event.group.name}</div>\n            <div className=\"eventLocation\">{event.venue.address_1}</div>\n            <div className=\"description\" dangerouslySetInnerHTML={{__html: event.description}} />\n            <a className=\"link\" href={event.link}>Event link</a>\n      </div>\n    )}\n      <button className=\"detailBtn\"\n      onClick={this.showDetails}\n      >Show/hide Details</button>\n    </div>\n  )\n}\n}\n\nexport default Event","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  \n  render() {\n    return (\n      <ul className=\"EventList\">\n        {this.props.events.map(event =>\n          <li key={event.id}>\n            <Event event={event} />\n          </li>\n        )}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","const mockEvents = {\n  city: {\n    id: 1007700,\n    city: \"München\",\n    lat: 48.14,\n    lon: 11.58,\n    state: \"\",\n    country: \"de\",\n    zip: \"meetup3\",\n    member_count: 1257\n  },\n  events:[\n    {\n      created: 1563825339000,\n      duration: 9000000,\n      id: \"263370107\",\n      name: \"Microservices mit dem MicroProfile 3.x\",\n      rsvp_limit: 80,\n      date_in_series_pattern: false,\n      status: \"upcoming\",\n      time: 1566925200000,\n      local_date: \"2019-08-27\",\n      local_time: \"19:00\",\n      updated: 1563825339000,\n      utc_offset: 7200000,\n      waitlist_count: 79,\n      yes_rsvp_count: 80,\n      venue: {\n      id: 26266792,\n      name: \"adesso AG\",\n      lat: 53.54524230957031,\n      lon: 9.950983047485352,\n      repinned: false,\n      address_1: \"Große Elbstraße 36\",\n      city: \"Hamburg\",\n      country: \"de\",\n      localized_country_name: \"Deutschland\"\n      },\n      group: {\n      created: 1387402147000,\n      name: \"Java User Group Hamburg\",\n      id: 11500362,\n      join_mode: \"open\",\n      lat: 53.54999923706055,\n      lon: 10,\n      urlname: \"jug-hamburg\",\n      who: \"Mitglieder\",\n      localized_location: \"Hamburg, Deutschland\",\n      state: \"\",\n      country: \"de\",\n      region: \"de_DE\",\n      timezone: \"Europe/Berlin\"\n      },\n      link: \"https://www.meetup.com/de-DE/jug-hamburg/events/263370107/\",\n      description: \"<p>Wer Microservices in Java entwickeln möchte, muss nicht zwangsläufig zu Spring Boot greifen. Es lohnt ein Blick auf alternative Frameworks, die in zunehmender Anzahl verfügbar sind und bezüglich ihrer Funktionalität stark aufholen. So schreitet auch die Entwicklung des MicroProfiles weiter voran. In beeindruckender Geschwindigkeit wurden zahlreiche APIs entwickelt, die (nicht nur) für die Entwicklung von Microservices sehr hilfreich sind.<br/>Hierzu zählen die Unterstützung von Metriken, Health Checks, Fault Tolerance und JSON Web Tokens. Für den Einsatz im Projekt kann aus unterschiedlichen Implementierungen wie TomEE, Thorntail oder OpenLiberty gewählt werden. In dieser Live-Coding-Session wird der praktische Einsatz von MicroProfile anhand eines Praxisbeispiels demonstriert.<br/> <br/> <br/>Referent:<br/>Thilo Frotscher arbeitet als freiberuflicher Softwarearchitekt und Trainer. Als Experte für Enterprise Java und Systemintegration unterstützt er seine Kunden überwiegend durch Entwicklung, Reviews oder die Durchführung von Schulungen. Thilo ist (Co-)Autor mehrerer Bücher in den Bereichen Java EE, (Web) Services und Systemintegration, hat zahlreiche Fachartikel verfasst und spricht regelmäßig auf Fachkonferenzen und Schulungsveranstaltungen oder bei Java User Groups.</p> \",\n      visibility: \"public\",\n      member_pay_fee: false\n    }\n  ]\n};\n\nexport { mockEvents };","import axios from 'axios';\nimport { mockEvents } from './mock-events';\n\nasync function getSuggestions(query) {\n  if (window.location.href.startsWith('http://localhost')) {\n    return [\n      {\n        city: 'Munich',\n        country: 'de',\n        localized_country_name: 'Germany',\n        name_string: 'Munich, Germany',\n        zip: 'meetup3',\n        lat: 48.14,\n        lon: 11.58\n      },\n      {\n        city: 'Munich',\n        country: 'us',\n        localized_country_name: 'USA',\n        state: 'ND',\n        name_string: 'Munich, North Dakota, USA',\n        zip: '58352',\n        lat: 48.66,\n        lon: -98.85\n      }\n    ];\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\n      + query\n      + '&access_token=' + token;\n    const result = await axios.get(url);\n    return result.data;\n  }\n\n  return [];\n};\n\nasync function getEvents(lat, lon, page) {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockEvents.events;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\n      + '&access_token=' + token;\n    // lat, lon is optional; if you have a lat and lon, you can add them\n    if (lat && lon) {\n      url += '&lat=' + lat + '&lon=' + lon;\n    }\n    if (page) {\n      url += '&page=' + page;\n    }\n    if (lat && lon && page) {\n      url += '&lat=' + lat + '&lon=' + lon + '&page=' + page;\n    }\n    const result = await axios.get(url);\n    const events = result.data.events;\n    return events;\n  }\n\n};\n\nfunction getAccessToken() {\n  const accessToken = localStorage.getItem('access_token');\n\n  if (!accessToken) {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n\n    if (!code) {\n      window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=1gmibf6mc2aklf6r4k2mcflirc&response_type=code&redirect_uri=https://maryhoy.github.io/meetup/';\n      return null;\n    }\n\n    return getOrRenewAccessToken('get', code);\n  }\n\n  const lastSavedTime = localStorage.getItem('last_saved_time');\n\n  if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\n    return accessToken\n  }\n\n  const refreshToken = localStorage.getItem('refresh_token');\n\n  return getOrRenewAccessToken('renew', refreshToken);\n};\n\nasync function getOrRenewAccessToken(type, key) {\n  let url;\n  if (type === 'get') {\n    // Lambda endpoint to get token by code\n    url = 'https://17etdynl73.execute-api.us-west-1.amazonaws.com/dev/api/token/'\n      + key;\n  } else if (type === 'renew') {\n    // Lambda endpoint to get token by refresh_token\n    url = 'https://17etdynl73.execute-api.us-west-1.amazonaws.com/dev/api/refresh/'\n      + key;\n  }\n\n  // Use Axios to make a GET request to the endpoint\n  const tokenInfo = await axios.get(url);\n\n  // Save tokens to localStorage together with a timestamp\n  localStorage.setItem('access_token', tokenInfo.data.access_token);\n  localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\n  localStorage.setItem('last_saved_time', Date.now());\n\n  // Return the access_token\n  return tokenInfo.data.access_token;\n};\n\nexport { getSuggestions, getEvents, getAccessToken };","import React, { Component } from 'react';\nimport { getSuggestions } from './api';\n\nclass CitySearch extends Component {\n  state = {\n    query: '',\n    suggestions: []\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ query: value });\n    getSuggestions(value).then(suggestions => this.setState({ suggestions }));\n  }\n\n  handleItemClicked = (value, lat, lon) => {\n    this.setState({ query: value, suggestions: [] });\n    this.props.updateEvents(lat, lon);\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n          placeholder=\"Your City\"\n        />\n\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map(item =>\n            <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)}>\n              {item.name_string}\n            </li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n\n  state = {\n    numberOfEvents: 32\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ numberOfEvents: value });\n    this.props.updateEvents(null, null, value);\n  }\n\n  render() {\n    return(\n      <div className=\"numberOfEvents\">\n        <label>Number of Events: </label>\n        <input\n          type=\"text\"\n          id=\"numberOfEvents__input\"\n          value={this.state.numberOfEvents}\n          onChange={this.handleInputChanged}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;","import React, { Component } from 'react';\nimport './App.css';\n\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { getEvents } from './api';\n\nclass App extends Component {\n\n  componentDidMount() {\n    getEvents().then(response => this.setState({ events: response }));\n  }\n\n  state = {\n    events: [],\n    page: null,\n    defaultCity: '',\n    lat: null,\n    lon: null\n  }\n\n  updateEvents = (lat, lon, page) => {\n    if(lat && lon) {\n      getEvents(lat, lon, this.state.page).then(response => this.setState({ events: response, lat, lon }));\n    }\n    else if (page) {\n      getEvents(this.state.lat, this.state.lon, page).then(response => this.setState({ events: response, page }));\n    }\n    else {\n      getEvents(this.state.lat, this.state.lon, this.state.page).then(response => this.setState({ events: response }));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className = \"header\">Meetup</h1>\n        <CitySearch updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents updateEvents={this.updateEvents} numberOfEvents={this.state.events.length} lat={this.state.lat} lon={this.state.lon} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}